var documenterSearchIndex = {"docs":
[{"location":"internalfunctions/#Internal-Functions","page":"Internal Functions","title":"Internal Functions","text":"","category":"section"},{"location":"internalfunctions/","page":"Internal Functions","title":"Internal Functions","text":"CurrentModule = BinaryInteractionSpectra\nusing BinaryInteractionSpectra\nend","category":"page"},{"location":"internalfunctions/","page":"Internal Functions","title":"Internal Functions","text":"Modules = [BinaryInteractionSpectra]","category":"page"},{"location":"internalfunctions/#BinaryInteractionSpectra.InvarientFlux-Tuple{Float32, Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.InvarientFlux","text":"InvarientFlux(s,mu12,mu22)\n\nreturns the value of the invarient flux with 's' mandelstram variable and masses 'mass1' and 'mass2'\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.InvarientFlux2-Tuple{Float32, Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.InvarientFlux2","text":"InvarientFlux2(s,mass12,mass22)\n\nreturns the value of the squared invarient flux with 's' mandelstram variable and masses 'mass1' and 'mass2'\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.InvarientFlux2Small-Tuple{Float32, Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.InvarientFlux2Small","text":"InvarientFluxSmall(sSmol,mass12,mass22)\n\nreturns the value of the squared invarient flux with smalled 's' mandelstram variable (sSmol = s - (m1+m2)^2)\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.InvarientFluxSmall-Tuple{Float32, Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.InvarientFluxSmall","text":"InvarientFluxSmall(sSmol,mu12,mu22)\n\nreturns the value of the invarient flux with smalled 's' mandelstram variable (sSmol = s - (m1+m2)^2)\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.Momentum3Value!-Tuple{Vector{Float32}, Vector{Float32}, Vector{Float32}, Vector{Float32}, Vararg{Float32, 4}}","page":"Internal Functions","title":"BinaryInteractionSpectra.Momentum3Value!","text":"Momentum3Value!(p3v,p3pv,p1v,p2v)\n\nTakes set of random initial particle states 'p1v' and 'p2v' and random output states angles 'p3v[2:3]' and modifies outputs 'p3v' and 'p3pv' values with calculated output momentum and corrects angles if momentum is negative. Function also returns a two bools 'p3physical' and 'p3pphysical' indicating if p3 and p3p are physical momentum states given the inputs.  Function also returns a Int 'NumStates' indicating the number of valid output states found.\n\nRequrires normalised masses (mu1,mu2,mu3,mu4) to be defined in advance in Init.jl as const.\n\nExamples\n\njulia> mu1 = 1836.1528f0\njulia> mu2 = 1836.1528f0\njulia> mu3 = 1836.1528f0\njulia> mu4 = 1836.1528f0\njulia> p1v = [1f0, 0.5f0, 1.8f0]\njulia> p2v = [2f0, 0.2f0, 0.7f0]\njulia> p3v = [0f0, 0.3f0, 0.7f0]\njulia> p3pv = zeros(Float32,3)\njulia> p3pv .= p3v\njulia> Momentum3Value!(p3v,p3pv,p1v,p2v,mu1,mu2,mu3,mu4)\n(true,true,2)\njulia> p3v\n 3-element Vector{Float32}:\n 2.04505\n 0.3\n 0.7\njulia> p3pv\n 3-element Vector{Float32}\n 0.691423\n -0.3\n 1.7\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.PhaseSpaceFactors1!-Tuple{Array{Float32, 6}, Array{Float32, 4}, Vector{Float32}, Vector{Float32}, Vector{Float32}, Vector{Float32}, Vector{Float32}, String, String}","page":"Internal Functions","title":"BinaryInteractionSpectra.PhaseSpaceFactors1!","text":"PhaseSpaceFactors1!(SMatrix,TMatrix,t3val,p1val,t1val,p2val,t2val,name1,name2)\n\nApplies phase space volume element factors for 'SMatrix' and 'TMatrix' terms in order to correctly apply 'STSymmetry' corrections. \n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.PhaseSpaceFactors2!-Tuple{Array{Float32, 6}, Array{Float32, 4}, Vararg{Vector{Float32}, 4}}","page":"Internal Functions","title":"BinaryInteractionSpectra.PhaseSpaceFactors2!","text":"PhaseSpaceFactors2!(SMatrix,TMatrix,t3val,p1val,t1val,p2val,t2val)\n\nTo follow 'PhaseSpaceFactors1' and 'STSymmetry'. Corrects phase space factors on 'SMatrix' and 'TMatrix' for use in kinetic codes. Assumes f(x,p,μ)= constant\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.RPointLogMomentum!-Tuple{Vector{Float32}, Float32, Float32, Int64}","page":"Internal Functions","title":"BinaryInteractionSpectra.RPointLogMomentum!","text":"RPointLogMomentum!(pu,pl,pv,num)\n\nEdits the first element of pv with a random real-space momentum value between 10^pl and 10^pu. This sample is chosen by first randomly picking a momentum bin in the range 1:num and then uniformly sampling a momentum point in real-space (rather than log10 space) between pl and pu which are the momentum values at start and end of that bin. Sampling is done such there will be a constant number of points per momentum-space volume. As the momentum space between 10^pl and 10^pu it is a spherical shell hence the correct sampling is p = (U*(10^pu)^3+(1-U)*(10^pl)^3)^13 with uniform U  01.\n\nAssumes f(xpμ)=f(xvecp)*(2πp^2)=const in bin, therefore momentum space volume element is mathrmdp and as such uniform sampling corresponds to U*10^u+(1-U)*10^l where U is a uniform random number between 0 and 1.\n\nIf instead f(xvecp)=const in bin, momentum space volume element is p^2 mathrmdp and uniform sampling corresponds to (10^pu)*sqrt3U+(1-U)*10^3pl-3pu where U is a uniform random number between 0 and 1.\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.RPointSphereCosThetaPhi!-Tuple{Vector{Float32}}","page":"Internal Functions","title":"BinaryInteractionSpectra.RPointSphereCosThetaPhi!","text":"RPointSphereThetaPhi!()\n\nAssigns the second (cos(theta)) and third (phi) elements of 'a' with a randomly, uniformly sampled values of spherical angles cos(theta) and phi (phi normalised by pi). \n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.STMonteCarloAxi_MultiThread!-Tuple{Array{Float32, 6}, Array{Float32, 4}, Array{UInt32, 5}, Array{UInt32, 4}, Any, Array{Float32, 5}, Array{Float32, 6}, Function, Function, Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Int64, Float32, Float32, Int64, Float32, Float32, Vararg{Int64, 4}}, Int64, Int64}","page":"Internal Functions","title":"BinaryInteractionSpectra.STMonteCarloAxi_MultiThread!","text":"STMonteCarloAxi_MultiThread!(SAtotal,TAtotal,SAtally,TAtally,p3v,p3pv,p1v,p2v,p3Max,t3MinMax,sigma,dsigmadt,Parameters,numTiterPerThread,numSiterPerThread)\n\nArguments\n\nSAtotal::Array{Float32,6} : Array of stored integration totals for S matrix\nTAtotal::Array{Float32,4} : Array of stored integration totals for T matrix\nSAtally::Array{UInt32,5} : Array of stored integration tallies for S matrix\nTAtally::Array{UInt32,4} : Array of stored integration tallies for T matrix\np3v::Vector{Float32} : Vector of momentum values for species 3\np3pv::Vector{Float32} : Second Vector of momentum values for species 3 for when two states are possible\np1v::Vector{Float32} : Vector of momentum values for species 1\np2v::Vector{Float32} : Vector of momentum values for species 2\np3Max::Array{Float32,5} : Array of maximum momentum values for species 3\nt3MinMax::Array{Float32,6} : Array of minimum and maximum theta values for species 3\nsigma::Function : Cross section function for the interaction\ndsigmadt::Function : Differential cross section function for the interaction\nParameters::Tuple{Float32,Float32,Float32,Float32,Float32,Float32,Int64,Float32,Float32,Int64,Float32,Float32,Int64,Int64,Int64,Int64} : Tuple of parameters for the interaction\nnumTiterPerThread::Int64 : Number of T iterations per thread\nnumSiterPerThread::Int64 : Number of S iterations per thread\n\nOutput:\n\nArgument arrays SAtotal,TAtotal,SAtally,TAtally are mutated to include the results of the Monte Carlo Integration.\n\nHidden Inputs (defined in Init.jl)\n\nDomain Boundaries (defined as CONST)       - p bounds and divisions for species 1,3,4       - theta divisions for species 1,3,4 ( bounds not needed as assumed [-1,1] )       - phi divisions for species 1,3,4 ( bounds not needed as assumed [0,2] )\nParticle Masses (defined as CONST)\nnumTiterPerThread and numSiterPerThread as the number of T and S integrations to perform.\n\nCalculation In Breif\n\nSet up worker threads\nRandom Sample points in each of these domains\nRandomPointSphere for theta and phi (for species 1,2,3)\nRandomPointMomentum for p ( species 1,2 only )\nTake random points (t3,h1,p1,p2,t1,t2,h3,h4) and calculate valid p3 point/points \nFind position in local S and T arrays and allocated tallies and totals accordingly.\nUpdate global S and T arrays with locks to prevent data races\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.STMonteCarloAxi_Serial!-Tuple{Array{Float32, 6}, Array{Float32, 4}, Array{UInt32, 5}, Array{UInt32, 4}, Vector{Float32}, Vector{Float32}, Vector{Float32}, Vector{Float32}, Array{Float32, 5}, Array{Float32, 6}, Function, Function, Tuple{Float32, Float32, Float32, Float32, Float32, Float32, Int64, Float32, Float32, Int64, Float32, Float32, Vararg{Int64, 4}}, Int64, Int64}","page":"Internal Functions","title":"BinaryInteractionSpectra.STMonteCarloAxi_Serial!","text":"STMonteCarloAxi_Serial!(SAtotal,TAtotal,SAtally,TAtally,p3v,p3pv,p1v,p2v,p3Max,t3MinMax,sigma,dsigmadt,Parameters,numTiter,numSiter)\n\nArguments\n\nSAtotal::Array{Float32,6} : Array of stored integration totals for S matrix\nTAtotal::Array{Float32,4} : Array of stored integration totals for T matrix\nSAtally::Array{UInt32,5} : Array of stored integration tallies for S matrix\nTAtally::Array{UInt32,4} : Array of stored integration tallies for T matrix\np3v::Vector{Float32} : Vector of momentum values for species 3\np3pv::Vector{Float32} : Second Vector of momentum values for species 3 for when two states are possible\np1v::Vector{Float32} : Vector of momentum values for species 1\np2v::Vector{Float32} : Vector of momentum values for species 2\np3Max::Array{Float32,5} : Array of maximum momentum values for species 3\nt3MinMax::Array{Float32,6} : Array of minimum and maximum theta values for species 3\nsigma::Function : Cross section function for the interaction\ndsigmadt::Function : Differential cross section function for the interaction\nParameters::Tuple{Float32,Float32,Float32,Float32,Float32,Float32,Int64,Float32,Float32,Int64,Float32,Float32,Int64,Int64,Int64,Int64} : Tuple of parameters for the interaction\nnumTiter::Int64 : Number of T iterations\nnumSiter::Int64 : Number of S iterations\n\nOutput:\n\nArgument arrays SAtotal,TAtotal,SAtally,TAtally are mutated to include the results of the Monte Carlo Integration.\n\nHidden Inputs (defined in Init.jl)\n\nDomain Boundaries (defined as CONST)       - p bounds and divisions for species 1,3,4       - theta divisions for species 1,3,4 ( bounds not needed as assumed [-1,1] )       - phi divisions for species 1,3,4 ( bounds not needed as assumed [0,2] )\nParticle Masses (defined as CONST)\nnumTiter and numSiter as the number of T and S integrations to perform.\n\nCalculation In Breif\n\nRandom Sample points in each of these domains\nRandomPointSphere for theta and phi (for species 1,2,3)\nRandomPointMomentum for p ( species 1,2 only )\nTake random points (t3,h1,p1,p2,t1,t2,h3,h4) and calculate valid p3 point/points \nFind position in S and T arrays and allocated tallies and totals accordingly.\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.STSymmetry!-Tuple{Array{Float32, 6}, Array{Float32, 4}, Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.STSymmetry!","text":"STSymmetry!(SMatrix,TMatrix,t3val,p1val,t1val,p2val,t2val,mu1,mu2)\n\nTo follow 'PhaseSpaceFactors1'. Physical nature of binary interaction has certain symmetries. 'STSymmetry' uses these symmetries to improve MC sampling of 'SMatrix' and 'TMatrix'.\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.SValue-Tuple{Vector{Float32}, Vector{Float32}, Vector{Float32}, Function, Float32, Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.SValue","text":"SValue(p3v,p1v,p2v,dsigmadt,mu1,mu2,mu3)\n\nReturns Sval from MC integration based on initial momentum states p1v and p2v and final state p3v and differential cross section dsigmadt based on particle selection.   Assumes f(x,p,μ)=constant over bin\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.SpectraEvaluateMultiThread-Tuple{Tuple{String, String, String, String, Float32, Float32, Int64, Float32, Float32, Int64, Float32, Float32, Int64, Int64, Int64, Int64, Int64, Int64, Int64, String, String}}","page":"Internal Functions","title":"BinaryInteractionSpectra.SpectraEvaluateMultiThread","text":"SpectraEvaluateMultiThread(userInputMultiThread)\n\nFunction to run the Monte Carlo integration of the S and T arrays in a multi-threaded environment. The function will run the Monte Carlo integration in parallel across the number of threads specified in the global variable nThreads. The function will then calculate the S and T matricies and save the results to a file.\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.SpectraEvaluateSerial-Tuple{Tuple{String, String, String, String, Float32, Float32, Int64, Float32, Float32, Int64, Float32, Float32, Int64, Int64, Int64, Int64, Int64, Int64, String, String}}","page":"Internal Functions","title":"BinaryInteractionSpectra.SpectraEvaluateSerial","text":"SpectraEvaluateSerial(userInputSerial)\n\nFunction to run the Monte Carlo integration of the S and T arrays in a serial environment. The function will run the Monte Carlo integration in serial and then calculate the S and T matricies and save the results to a file.\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.TValue-Tuple{Vector{Float32}, Vector{Float32}, Function, Vararg{Float32, 4}}","page":"Internal Functions","title":"BinaryInteractionSpectra.TValue","text":"TValue(p1v,p2v,sigma,mu1,mu2)\n\nreturns Tval with its Tval from MC integration based on initial momentum states p1v and p2v and cross section sigma based on particle selection. If initial state fails sCheck, i.e. cannot generate a physical output state, Tval is set to 0f0.  Assumes f(x,p,μ)=constant over bin\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.deltaEVector-Tuple{Vector{Float32}, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.deltaEVector","text":"deltaEVector(pr,mu)\n\nInputs a num+1 long Vector{Float32} of p grid boundries and the particle mu value (normalised mass) and returns a num long Vector{Float32} of average energy values per grid cell.\n\nExamples\n\njulia> deltaEVector([1.0f0, 10.0f0, 100.0f0, 1000.0f0], 1.0f0)\n3-element Vector{Float32}:\n 50.600693\n 4951.15\n 495001.16\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.deltaVector-Tuple{Vector{Float32}}","page":"Internal Functions","title":"BinaryInteractionSpectra.deltaVector","text":"deltaVector(valr)\n\nInputs a num+1 long Vector{Float32} quantitiy values (domain bounds) and returns a num long Vector{Float32} of differeces (domain widths).\n\nExamples\n\njulia> deltaVector([1.0f0, 10.0f0, 100.0f0, 1000.0f0])\n3-element Vector{Float32}:\n 9.0\n 90.0\n 900.0\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.dsigmadt_ElePosPhoPho-NTuple{6, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.dsigmadt_ElePosPhoPho","text":"dsigmadt_ElePosPhoPho(sSmol,sBig,tSmol,tBig,uSmol,uBig)\n\nreturns the differential cross section for electron positron annihilation to two photons. Berestetskii 1982 (88.4). Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\nfracdσdt = -frac1s(s-4)left(left(frac1t-1+frac1u-1right)^2+left(frac1t-1+frac1u-1right)-frac14left(fract-1u-1+fracu-1t-1right)right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 4  s = sSmol + 4\ntSmol::Float32 : t - tBig\ntBig::Float32 : (m_3-m_1)^2 = 1  t = tSmol + 1\nuSmol::Float32 : u - uBig\nuBig::Float32 : (m2-m3)^2 = 1  u = uSmol + 1\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.dsigmadt_PhoPhoElePos-NTuple{6, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.dsigmadt_PhoPhoElePos","text":"dsigmadt_PhoPhoElePos(sSmol,sBig,tSmol,tBig,uSmol,uBig)\n\nreturns the differential cross section for photon-photon annihilation to electron-positron pair. (Inverse proceess of electron positron annihilation to two photons). Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\n\\frac{dσ}{dt} = -\\frac{1}{s^2}\\left(\\left(\\frac{1}{t-1}+\\frac{1}{u-1}\\right)^2+\\left(\\frac{1}{t-1}+\\frac{1}{u-1}\\right)-\\frac{1}{4}\\left(\\frac{t-1}{u-1}+\\frac{u-1}{t-1}\\right)\\right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 0  s = sSmol\ntSmol::Float32 : t - tBig\ntBig::Float32 : (m_3-m_1)^2 = 1  t = tSmol + 1\nuSmol::Float32 : u - uBig\nuBig::Float32 : (m_2-m_3)^2 = 1  u = uSmol + 1\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.dsigmadt_SphSphSphSph-NTuple{6, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.dsigmadt_SphSphSphSph","text":"dsigmadt_SphSphSphSph(sSmol,sBig,tSmol,tBig,uSmol,uBig)\n\nreturns the differential cross section for the binary interaction of hard spheres with normalised masses m_1m_2m_3m_4=m_textSph. Normalised by πR_Sph^2.\n\nfracdσdt = frac1s-4m_textSph^2\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2=4m_textSph^2\ntSmol::Float32 : t - tBig\ntBig::Float32 : (m_3-m_1)^2=0\nuSmol::Float32 : u - uBig\nuBig::Float32 : (m_2-m_3)^2=0\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.fload_All-Tuple{String, String}","page":"Internal Functions","title":"BinaryInteractionSpectra.fload_All","text":"fload_All(fileLocation,fileName)\n\nLoads all the data stored in fileName stored at fileLocation.\n\nExample\n\n    (Run_Parameters, Stot,Ttot,Stal,Ttal,SMatrix,TMatrix,p3Max,t3MinMax,SConv,TConv) = fload_All(fileLocation,fileName);\n\nReturns a tuple of the data stored in the file. The fields are as follows:\n\nRun_Parameters : A tuple of the parameters used in the evaluation.\nStot : A 6D matrix totalling all the emission spectrum values sampled.\nTtot : A 4D matrix totalling all the absorption spectrum values sampled.\nStal : A 5D matrix of tallies of the number of emission spectrum values sampled.\nTtal : A 4D matrix of tallies of the number of absorption spectrum values sampled.\nSMatrix : A 6D matrix of the emission spectrum.\nTMatrix : A 4D matrix of the absorption spectrum.\np3Max : The maximum value of the momentum space variable p3 sampled for each bin. (Useful for correcting numerical diffusion)\nt3MinMax : The minimum and maximum values of the momentum space variable t3 sampled for each bin. (Useful for correcting numerical diffusion)\nSConv : A 6D matrix of the convergence of the emission spectrum compaired to the previous run with given Run_Parameters.\nTConv : A 4D matrix of the convergence of the absorption spectrum compaired to the previous run with given Run_Parameters.\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.location-Tuple{Float32, Float32, Int64, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.location","text":"location(u,l,num,val)\n\nReturns the index of the bin in which 'val' is contatined based on the 'num' of bins and their 'u' upper and 'l' lower bound.\n\nExamples\n\njulia> location(10f0,0f0,9,2f0)\n2\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.location_p3-Tuple{Float32, Float32, Int64, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.location_p3","text":"location_p3(u,l,num,val)\n\nReturns the index of the bin in which 'val' is contatined based on the 'num' of bins and their 'u' upper and 'l' lower bound including overflow and underflow possibilities. Overflow are assigned to num+1 while underflow are assigned to lowest bin i.e. 1.\n\nExamples\n\njulia> location_p3(10f0,1f0,9,2f0)\n2\njulia> location_p3(10f0,1f0,9,11f0) # overflow\n10\njulia> location_p3(10f0,1f0,9,0.5f0) # underflow\n1\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.location_t-Tuple{Int64, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.location_t","text":"location_t(numt,val)\n\nReturns the index of the bin in which the costheta 'val' is contatined based on the 'numt' of bins. Bounds [tl tu] are defined as CONST in Init.jl\n\nExamples\n\njulia> location_t(8,0.5f0)\n6\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.meanVector-Tuple{Vector{Float32}}","page":"Internal Functions","title":"BinaryInteractionSpectra.meanVector","text":"meanVector(valr)\n\nInputs a num+1 long Vector{Float32} of domain bounds and returns a num long Vector{Float32} of mean value in domain range.\n\nExamples\n\njulia> meanVector([1.0f0, 10.0f0, 100.0f0, 1000.0f0])\n3-element Vector{Float32}:\n 5.5\n 55.0\n 550.0\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.prange-Tuple{Float32, Float32, Int64}","page":"Internal Functions","title":"BinaryInteractionSpectra.prange","text":"prange(pl,pu,nump)\n\nReturns a nump+1 long Vector{Float32} of p-space grid bounds NOT in Log10 space.\n\nExamples\n\njulia> prange(-5f0,4f0,9)\n10-element Vector{Float32}:\n 1.0e-5\n 1.0e-4\n 1.0e-3\n 0.01\n 0.1\n 1.0\n 10.0\n 100.0\n 1000.0\n 10000.0\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.sCheck-NTuple{4, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.sCheck","text":"sCheck(sSmol,sBig,mu3,mu4)\n\nReturns 'true' if 's' mandelstram generated from inital system state can generate a physical output state. \n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.sigma_ElePosPhoPho-Tuple{Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.sigma_ElePosPhoPho","text":"sigma_ElePosPhoPho(sSmol,sBig)\n\nreturns the total cross section for electron positron annihilation to two photons. Berestetskii 1982 (88.6). Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\nσ = frac14s^2(s-4)left((s^2+4s-8)logleft(fracsqrts+sqrts-4sqrts-sqrts-4right)-(s+4)sqrts(s-4)right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 4  s = sSmol + 4\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.sigma_PhoPhoElePos-Tuple{Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.sigma_PhoPhoElePos","text":"sigma_PhoPhoElePos(sSmol,sBig)\n\nreturns the total cross section for photon-photon annihilation to electron-positron pair. Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\nσ = frac12s^3left((s^2+4s-8)logleft(fracsqrt(s)+sqrt(s-4)sqrt(s)-sqrt(s-4)right)-(s+4)sqrts(s-4)right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 0  s = sSmol\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.sigma_SphSphSphSph-Tuple{Float32, Float32}","page":"Internal Functions","title":"BinaryInteractionSpectra.sigma_SphSphSphSph","text":"sigma_SphSphSphSph(sSmol,sBig)\n\nreturns the total cross section for the binary interaction of hard spheres with normalised masses (wrt electron mass) m_1m_2m_3m_4=m_textSph. Normalised by πR_Sph^2.\n\nσ = frac12\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m1+m2)^2\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.trange-Tuple{Int64}","page":"Internal Functions","title":"BinaryInteractionSpectra.trange","text":"trange(numt)\n\nReturns a numt+1 long Vector{Float32} of theta-space grid bounds in terms of cos(theta). Upper and lower bounds [tl tu] are defined as CONST in Init.jl as [-1f0 1f0].\n\nExamples\n\njulia> trange(8)\n9-element Vector{Float32}:\n -1.0\n -0.75\n -0.5\n -0.25\n  0.0\n  0.25\n  0.5\n  0.75\n  1.0\n\n\n\n\n\n","category":"method"},{"location":"internalfunctions/#BinaryInteractionSpectra.vectorLocation-Tuple{Float32, Float32, Int64, Int64, Vector{Float32}}","page":"Internal Functions","title":"BinaryInteractionSpectra.vectorLocation","text":"vectorLocation(pu,pl,nump,numt,vector)\n\nReturns a tuple of bin location for (log10momentum,cos(theta)) based on an input 'vector' and bounds 'u,l' of their domains and the 'num' of uniformly spaced bins. costheta bounds [tl tu] are defined as CONST in Init.jl\n\nExamples\n\n```julia-repl julia> vectorLocation(4f0,-5f0,9,8,[1f0,0.5f0,1.5f0]) (5,6)\n\n\n\n\n\n","category":"method"},{"location":"crosssections/#Implemented-Particles-and-Binary-Interactions","page":"Cross Sections","title":"Implemented Particles and Binary Interactions","text":"","category":"section"},{"location":"crosssections/#Particles","page":"Cross Sections","title":"Particles","text":"","category":"section"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"Below is a table of the currently implemented particles (i.e. their particle properties are defined within the code)","category":"page"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"Particle Abr. String Notes\nSphere \"Sph\" Mass taken to be the mass of the Proton\nElectron \"Ele\" \nPositron \"Pos\" \nProton \"Pro\" ","category":"page"},{"location":"crosssections/#Implemented-Interactions","page":"Cross Sections","title":"Implemented Interactions","text":"","category":"section"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"These binary interactions have currently been implemented:","category":"page"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"Collision of hard spheres SphSphSphSph\nfunctions: BinaryInteractionSpectra.dsigmadt_SphSphSphSph BinaryInteractionSpectra.sigma_SphSphSphSph\nPhoton pair production from electron positron annihilation ElePosPhoPho\nfunctions: BinaryInteractionSpectra.dsigmadt_ElePosPhoPho BinaryInteractionSpectra.sigma_ElePosPhoPho\nElectron positron pair production from photon pair annihilation PhoPhoElePos\nfunctions: BinaryInteractionSpectra.dsigmadt_PhoPhoElePos BinaryInteractionSpectra.sigma_PhoPhoElePos","category":"page"},{"location":"crosssections/#Differential-and-total-cross-section-functions","page":"Cross Sections","title":"Differential and total cross section functions","text":"","category":"section"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"warning: Warning\nTo ensure greater computational accuracy and prevent underflow of Float32 precision values, all cross sections have a normalisation defined in the function documentation.","category":"page"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"All cross sections are to be defined in terms of the Mandelstram variables s=(p_1^mu+p_2^mu)^2, t=(p_1^mu-p_3^mu)^2 and u=(p_2^mu-p_3^mu)^2. To maintain accuracy of cross sections and avoid DivZero issues when momenta is small compared to the mass of the particles (at Float32 precision), each Mandelstram variable is split into two components e.g. s=sSmol+sBig where sBig = (m_1+m_2)^2. The latter part typically cancels with terms in the cross sections, leading to better accuracy. ","category":"page"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"CurrentModule = BinaryInteractionSpectra\nusing BinaryInteractionSpectra\nend","category":"page"},{"location":"crosssections/","page":"Cross Sections","title":"Cross Sections","text":"sigma_SphSphSphSph\ndsigmadt_SphSphSphSph\n\nsigma_ElePosPhoPho\ndsigmadt_ElePosPhoPho\n\nsigma_PhoPhoElePos\ndsigmadt_PhoPhoElePos","category":"page"},{"location":"crosssections/#BinaryInteractionSpectra.sigma_SphSphSphSph","page":"Cross Sections","title":"BinaryInteractionSpectra.sigma_SphSphSphSph","text":"sigma_SphSphSphSph(sSmol,sBig)\n\nreturns the total cross section for the binary interaction of hard spheres with normalised masses (wrt electron mass) m_1m_2m_3m_4=m_textSph. Normalised by πR_Sph^2.\n\nσ = frac12\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m1+m2)^2\n\n\n\n\n\n","category":"function"},{"location":"crosssections/#BinaryInteractionSpectra.dsigmadt_SphSphSphSph","page":"Cross Sections","title":"BinaryInteractionSpectra.dsigmadt_SphSphSphSph","text":"dsigmadt_SphSphSphSph(sSmol,sBig,tSmol,tBig,uSmol,uBig)\n\nreturns the differential cross section for the binary interaction of hard spheres with normalised masses m_1m_2m_3m_4=m_textSph. Normalised by πR_Sph^2.\n\nfracdσdt = frac1s-4m_textSph^2\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2=4m_textSph^2\ntSmol::Float32 : t - tBig\ntBig::Float32 : (m_3-m_1)^2=0\nuSmol::Float32 : u - uBig\nuBig::Float32 : (m_2-m_3)^2=0\n\n\n\n\n\n","category":"function"},{"location":"crosssections/#BinaryInteractionSpectra.sigma_ElePosPhoPho","page":"Cross Sections","title":"BinaryInteractionSpectra.sigma_ElePosPhoPho","text":"sigma_ElePosPhoPho(sSmol,sBig)\n\nreturns the total cross section for electron positron annihilation to two photons. Berestetskii 1982 (88.6). Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\nσ = frac14s^2(s-4)left((s^2+4s-8)logleft(fracsqrts+sqrts-4sqrts-sqrts-4right)-(s+4)sqrts(s-4)right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 4  s = sSmol + 4\n\n\n\n\n\n","category":"function"},{"location":"crosssections/#BinaryInteractionSpectra.dsigmadt_ElePosPhoPho","page":"Cross Sections","title":"BinaryInteractionSpectra.dsigmadt_ElePosPhoPho","text":"dsigmadt_ElePosPhoPho(sSmol,sBig,tSmol,tBig,uSmol,uBig)\n\nreturns the differential cross section for electron positron annihilation to two photons. Berestetskii 1982 (88.4). Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\nfracdσdt = -frac1s(s-4)left(left(frac1t-1+frac1u-1right)^2+left(frac1t-1+frac1u-1right)-frac14left(fract-1u-1+fracu-1t-1right)right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 4  s = sSmol + 4\ntSmol::Float32 : t - tBig\ntBig::Float32 : (m_3-m_1)^2 = 1  t = tSmol + 1\nuSmol::Float32 : u - uBig\nuBig::Float32 : (m2-m3)^2 = 1  u = uSmol + 1\n\n\n\n\n\n","category":"function"},{"location":"crosssections/#BinaryInteractionSpectra.sigma_PhoPhoElePos","page":"Cross Sections","title":"BinaryInteractionSpectra.sigma_PhoPhoElePos","text":"sigma_PhoPhoElePos(sSmol,sBig)\n\nreturns the total cross section for photon-photon annihilation to electron-positron pair. Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\nσ = frac12s^3left((s^2+4s-8)logleft(fracsqrt(s)+sqrt(s-4)sqrt(s)-sqrt(s-4)right)-(s+4)sqrts(s-4)right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 0  s = sSmol\n\n\n\n\n\n","category":"function"},{"location":"crosssections/#BinaryInteractionSpectra.dsigmadt_PhoPhoElePos","page":"Cross Sections","title":"BinaryInteractionSpectra.dsigmadt_PhoPhoElePos","text":"dsigmadt_PhoPhoElePos(sSmol,sBig,tSmol,tBig,uSmol,uBig)\n\nreturns the differential cross section for photon-photon annihilation to electron-positron pair. (Inverse proceess of electron positron annihilation to two photons). Masses and momenta are normalised by the rest mass of the electron m_textEle and the cross section is normalised by 3σ_T.\n\n\\frac{dσ}{dt} = -\\frac{1}{s^2}\\left(\\left(\\frac{1}{t-1}+\\frac{1}{u-1}\\right)^2+\\left(\\frac{1}{t-1}+\\frac{1}{u-1}\\right)-\\frac{1}{4}\\left(\\frac{t-1}{u-1}+\\frac{u-1}{t-1}\\right)\\right)\n\nArguments\n\nsSmol::Float32 : s - sBig\nsBig::Float32 : (m_1+m_2)^2 = 0  s = sSmol\ntSmol::Float32 : t - tBig\ntBig::Float32 : (m_3-m_1)^2 = 1  t = tSmol + 1\nuSmol::Float32 : u - uBig\nuBig::Float32 : (m_2-m_3)^2 = 1  u = uSmol + 1\n\n\n\n\n\n","category":"function"},{"location":"quickstart/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"First install the package by  ... TO BE UPDATED ONCE PACKAGE IS PUBLICLY AVAILABLE","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"note: Note\nAn example script Run_BinaryInteractionSpectra.jl for setting up and running the evaluation of the discrete collision integral can be found under src/Common/ of the package. It is recommended that you copy this script to your working directory, edit the relevant fields and then running, either using the command include(\"Run_BinaryInteractionSpectra.jl)in a julia-repl session, or by running the script line by line in your favourite code editor.","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"The example script Run_BinaryInteractionSpectra.jl operates as follows:","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"Define the names of the 4 particles involved in the interaction (12->34) as the strings name1 name2 name3 name4\nThese should of the form of three letters, which abbreviate the particles full name (see Particles for list of currently implemented particles).\nThey should be ordered to match a currently Implemented Interactions\nDefine the momentum space discretisation. This includes the upper and lower bounds of momentum for particle species 1,2 and 3 (e.g. p1l and p1u for species 1) and the number of divisions (bins) for each particles momentum space (e.g. nump1).\nDefine the number of divisions for the angular momentum space (i.e. cos(theta) space) for the particle species 1,2 and 3 (e.g. numt1). \nDefine the number of Monte-Carlo samples to perform. \nnumTiter for the number of random sets of vecp_1vecp_2 to sample. \nnumSiter for the number of random vecp_3 states to sample per vecp_1vecp_2.\nIf multithreading then define nThreads that will be used. This generates nThreads workers that perform evaluation in parallel, utilising locks to prevent data races. (see Multi-Threading for how to set up multi-threading in Julia)\nDefine the fileLocation where the output file (JLD2) named fileName is to be written.\nEvaluate the emission and absorption spectrum using the SpectraEvaluateSerial function for serial and SpectraEvaluateMultiThread for multithread. \nOnce the user defined number of Monte-Carlo samples have been evaluated and the data has been stored, the data can be loaded back into the workspace as a tuple using the fload_All function.","category":"page"},{"location":"#BinaryInteractionSpectra.jl","page":"Overview","title":"BinaryInteractionSpectra.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"BinaryInteractionSpectra.jl is a package for the evaluation of the collision integral from binary interactions of arbitrary momentum and anisotropic particle distributions using a method of discretisation and Monte-Carlo integration. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The evaluation of the collision integral is of great use when studying kinetic system. The evolution of particle distributions f(x^muboldsymbolp) within such a system is dictated by the collisional relativistic Boltzmann equation:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"p^nupartial_nu f(x^muboldsymbolp)+partial_p^nuleft(F^nu f(x^muboldsymbolp)right)=C(x^muboldsymbolp)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"where p^mu=(p^0boldsymbolp) is the 4-Momentum and C(x^aboldsymbolp) is the collision integral. From here we shall neglect the terms involving advection in space and advection on momentum-space (external forcing), as such the dependence on x^mu is also dropped. The collision integral is given by ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"    C(boldsymbolp_3)=intfracmathrmd^3boldsymbolp_1p_1^0fracmathrmd^3boldsymbolp_2p_2^0fracmathrmd^3boldsymbolp_4p_4^0leftfracf(boldsymbolp_1)f(boldsymbolp_2)1+delta_12W(p_1^mup_2^mup_3^mup_4^mu)- fracf(boldsymbolp_3)f(boldsymbolp_4)1+delta_12W(p_3^mup_4^mup_1^mup_2^mu)right","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"with the transition rate W being given by:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"W(p_1^mup_2^mup_3^mup_4^mu)=fracsp_textin^*2pifracmathrmdsigma_1234mathrmdt(st)delta^(4)(p_1^mu+p_2^mu-p_3^mu-p_4^mu)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"and fracmathrmdsigma_1234mathrmdt(st) is the Lorentz invariant differential cross section of the forward reaction 12to34.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The Boltzmann equation can then be discretised in momentum space by integrating over a discrete volume element Delta^3boldsymbolp_3 to yield: ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"int_Delta^3boldsymbolp_3fracmathrmd^3boldsymbolp_3p_3^0p_3^mupartial_mu f(x^muboldsymbolp_3)=int_Delta^3boldsymbolp_3mathrmd^3boldsymbolp_3S_spe(x^muboldsymbolp_3)-T_spe(x^muboldsymbolp_3)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"where the collision integral has been split into two parts, an emission spectrum","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"S_textspe(boldsymbolp_3)=frac11+delta_12frac1p^0_3intfracmathrmd^3boldsymbolp_1p_1^0fracmathrmd^3boldsymbolp_2p_2^0fracmathrmd^3boldsymbolp_4p_4^0f(boldsymbolp_1)f(boldsymbolp_2)W(p_1^mup_2^mup_3^mup_4^mu)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"math dictating the rate of gain of particles of a specific type at a specific momentum from a binary interaction, and an absorption spectrum ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"T_textspe(boldsymbolp_3)=frac11+delta_12frac1p^0_3intfracmathrmd^3boldsymbolp_1p_1^0fracmathrmd^3boldsymbolp_2p_2^0fracmathrmd^3boldsymbolp_4p_4^0 f(boldsymbolp_3)f(boldsymbolp_4)W(p_3^mup_4^mup_1^mup_2^mu)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"dictating the rate of loss of particles of a specific type at a specific momentum from the same interaction.","category":"page"},{"location":"#Assumptions","page":"Overview","title":"Assumptions","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"In order to enable the evaluation of the emission and absorption terms, we make the following set of assumptions (dropping dependence on space-time for notational simplicity):  ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The system is axisymmetric in momentum space coordinates i.e. only dependant on p=boldsymbolp and the cosine of the angle to the axis of symmetry (hatz) mu where hatzcdotboldsymbolp=pcostheta=pmu \nThe distribution functions are redefined in an axisymmetric form i.e. f(boldsymbolp)equivfracf(pmu)2pi p^2. This is done such that a single particle is described by the distribution f(pmu)=delta(p-p_i)delta(mu-mu_i).\nThe axisymmetric distribution functions are averaged over phase space intervals Delta pDeltamu, to generate discrete values i.e. f(tp_imu_j)=frac1Delta p_iDeltamu_jint_Delta p_iDeltamu_j mathrmdp mathrmdmuf(pmu), such that they act as if they are constant over that interval of phase space.  \nParticle masses, momenta and energies are normalised by a factor of the rest mass of the electron m_textEle and the speed of light c=1.","category":"page"},{"location":"#Discrete-Form-of-the-Boltzmann-Equation","page":"Overview","title":"Discrete Form of the Boltzmann Equation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Following the assumptions laid out in the previous section. The axisymmetric, momentum-discrete Boltzmann equation is given by (remember the neglect of space and momentum-space advection terms)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"partial_t f_3ij=f_1klf_2mnS_1234ijklmn-f_3ijf_4klT_3412ijkl","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The discrete emission spectrum term is a 6D array, given by","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"f_1klf_2mnS_1234ijklmn=f(p_1kmu_1l)f(p_2mmu_2n)fracDelta p_1kDelta mu_1lDelta p_2mDelta mu_2nDelta p_3ifrac1Nsum^N_a=1leftS_valright(boldsymbolp_1boldsymbolp_2boldsymbolp_3_a) ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"with ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"S_val=frac11+delta_12sum_pmfrac2p_pm^2mathcalF_12^2p_1^0p_2^0fracmathrmdsigma_1234mathrmdt(st_pm)frac1p_1^0p_pm-p_pm^0p_1cosTheta_pm1+p_2^0p_pm-p_pm^0p_2cosTheta_pm2","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"where p_pm are the two roots of (s+t-m_3^2-m_2^2-2p^mu_1p_4mu). ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The discrete absorption term is a 4D Array, given by","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"f_3ijf_4klT_3412ijkl=f(p_3imu_3j)f(p_4kmu_4l)Deltaboldsymbolp_4kDeltamu_4lfrac1Nsum^N_a=1leftT_valright(boldsymbolp_3boldsymbolp_4_a)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"with","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"T_val=frac11+delta_12fracmathcalF_34(s)sigma_3412(s)p_3^0p_4^0","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"and sigma_3412(s) the lorentz invariant total cross section of the reverse reaction 34to12.","category":"page"},{"location":"#Evaluation","page":"Overview","title":"Evaluation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Given a user input of interaction to evaluate and what discretisation to use, the discrete emission spectrum S_1234ijklmn and absorption spectrum T_1234ijkl are solved simultaneously by Monte-Carlo integration. ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"note: Note\nThe order of the interaction in the absorption spectrum (3412 to 1234) is changed for easier evaluation as sampled points can be used for both emission and absorption terms. Rather than solving for the forward and reverse reaction, only the forward reaction is solved for. Hence two sets of emission and absorption spectra may need to be generated to describe a single reversible reaction.  ","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"The evaluation is performed by the functions SpectraEvaluateSerial or SpectraEvaluateMultiThread depending on if the code is to run in serially on a single core or multi-threaded on multiple cores of a single CPU. The code will then save the resulting multidimensional arrays.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"warning: Warning\nThe evaluation does not guarantee convergence of the Monte-Carlo integration, instead it will sample only a user defined number of points. A rough measure of convergence is calculated (based on comparison to the output of the previous run) and stored as SConverge and TConverge in the output file.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Evaluation is performed using Float32 precision, with all Internal Functions designed to maintain accuracy to this precision.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"An in-depth setup guide is provided in the Getting Started section.  ","category":"page"}]
}
